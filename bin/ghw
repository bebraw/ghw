#!/usr/bin/env node
var VERSION = require('../package.json').version;

var path = require('path');
var fs = require('fs');
var handlebars = require('handlebars');
var funkit = require('funkit');
var ghw = require('../');

var partial = funkit.partial;
var merge = funkit.common.merge;

var program = require('commander');

console.log('ghw ' + VERSION + '\n');

program.
    version(VERSION).
    option('-c --config <json file>', 'configuration file').
    option('-t --templates <template>', 'template directory').
    option('-i --input <input>', 'input (file/directory)').
    option('-o --output <output>', 'output directory').
    option('-s --silent', 'silent').
    parse(process.argv);

if (!program.templates) quit('Missing template directory');
if (!program.input) quit('Missing input');
if (!program.output) quit('Missing output');

var baseTemplate = path.join(program.templates, 'base.html');
var silent = program.silent;
var conf = program.config? JSON.parse(fs.readFileSync(program.config, 'utf-8')): {};

fs.exists(baseTemplate, function(exists) {
    exists? main(): quit('Template directory is missing base.html'); 
});

function main() {
    if(!fs.existsSync(program.output)) {
        fs.mkdirSync(program.output);
    }

    var data;
    var stats = fs.statSync(program.input);
    if(stats.isFile()) {
        data = fs.readFileSync(program.input, 'utf-8');
        ghw.transform(program.input, data, ghw.transformers, partial(proc, baseTemplate, program.output, silent, conf));
    }
    if(stats.isDirectory()) {
        var files = fs.readdirSync(program.input);

        files.forEach(function (file) {
            var p = path.join(program.input, file);
            var stats = fs.statSync(p);

            if(stats.isFile()) {
                data = fs.readFileSync(p, 'utf-8');
                ghw.transform(p, data, ghw.transformers, partial(proc, baseTemplate, program.output, silent, conf));
            }
        });

        fs.renameSync(path.join(program.output, 'home.html'), path.join(program.output, 'index.html'));
    }
}

function proc(t, o, silent, conf, f, ctx) {
    conf.pageName = path.basename(f, '.md');
    var data = handlebars.compile(fs.readFileSync(t, 'utf-8'))(merge(conf, ctx));

    var target = path.join(o, escape(path.basename(f, '.md').toLowerCase()) + '.html');
    fs.writeFileSync(target, data);

    if(!silent) console.log('Wrote ' + target);
}

function quit(msg) {
    console.log(msg);
    process.exit();
}
