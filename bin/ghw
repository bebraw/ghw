#!/usr/bin/env node
var VERSION = require('../package.json').version;

var _extend = require('util')._extend;
var path = require('path');
var fs = require('fs');
var qs = require('querystring');

var handlebars = require('handlebars');
var funkit = require('funkit');
var ghw = require('../');

var partial = funkit.partial;
var merge = funkit.common.merge;

var program = require('commander');

console.log('ghw ' + VERSION + '\n');

program.
    version(VERSION).
    option('-c --config <json file>', 'configuration file').
    option('-t --templates <template>', 'template directory').
    option('-i --input <input>', 'input (file/directory)').
    option('-o --output <output>', 'output directory').
    option('-s --silent', 'silent').
    parse(process.argv);

if(!program.templates) {
    quit('Missing template directory');
}
if(!program.input) {
    quit('Missing input');
}
if(!program.output) {
    quit('Missing output');
}

var baseTemplate = path.join(program.templates, 'base.html');
var silent = program.silent;
var conf = program.config? JSON.parse(fs.readFileSync(program.config, 'utf-8')): {};

fs.exists(baseTemplate, function(exists) {
    if(exists) {
        main();
    }
    else {
        quit('Template directory is missing base.html');
    }
});

function main() {
    if(!fs.existsSync(program.output)) {
        fs.mkdirSync(program.output);
    }

    var data;
    var base = {
        inputPath: baseTemplate,
        outputDir: program.output,
        silent: silent,
        conf: conf
    };
    var stats = fs.statSync(program.input);

    if(stats.isFile()) {
        data = fs.readFileSync(program.input, 'utf-8');
        ghw.transform(data, ghw.transformers, partial(proc, extend(base, {
            input: program.input
        })));
    }
    if(stats.isDirectory()) {
        var files = fs.readdirSync(program.input);

        files.forEach(function (file) {
            var p = path.join(program.input, file);
            var stats = fs.statSync(p);

            if(stats.isFile()) {
                data = fs.readFileSync(p, 'utf-8');
                ghw.transform(data, ghw.transformers, partial(proc, extend(base, {
                    input: p
                })));
            }
        });

        fs.renameSync(path.join(program.output, 'home.html'), path.join(program.output, 'index.html'));
    }
}

function extend(a, b) {
    return _extend(_extend({}, a), b);
}

function proc(o, ctx) {
    // inputPath, outputDir, silent, conf, input
    var inputBase = path.basename(o.input, '.md');

    o.conf.pageName = inputBase;

    var data = handlebars.compile(fs.readFileSync(o.inputPath, 'utf-8'))(merge(o.conf, ctx));
    var target = path.join(o.outputDir, qs.escape(inputBase.toLowerCase()) + '.html');

    fs.writeFileSync(target, data);

    if(!o.silent) {
        console.log('Wrote ' + target);
    }
}

function quit(msg) {
    console.log(msg);
    process.exit();
}
