#!/usr/bin/env node
var VERSION = '0.4.0';

var path = require('path');
var fs = require('fs');
var wrench = require('wrench');
var mu = require('mu2');
var ghw = require('../');

var program = require('commander');

console.log('ghw ' + VERSION + '\n');

program.
    version(VERSION).
    option('-t --templates <template>', 'template directory').
    option('-i --input <input>', 'input (file/directory)').
    option('-o --output <output>', 'output directory').
    parse(process.argv);

if (!program.templates) quit('Missing template directory');
if (!program.input) quit('Missing input');
if (!program.output) quit('Missing output');

var baseTemplate = path.join(program.templates, 'base.html');

path.exists(baseTemplate, function(exists) {
    exists? main(): quit('Template directory is missing base.html'); 
}); 

function main() {
    if(!path.existsSync(program.output)) {
        fs.mkdirSync(program.output);
    }   

    fs.stat(program.input, function(err, stats) {
        if (err) throw err;

        if(stats.isFile()) {
            ghw.transform(program.input, ghw.transformers, partial(proc, baseTemplate, program.output));
        }   
        if(stats.isDirectory()) {
            fs.readdir(program.input, function(err, files) {
                if (err) throw err;

                files.forEach(function (file) {
                    var p = path.join(program.input, file);
     
                    fs.stat(p, function(err, stats) {
                        if(stats.isFile()) {
                            ghw.transform(p, ghw.transformers, partial(proc, baseTemplate, program.output));
                        }   
                    }); 
                }); 
            }); 
        }   
    }); 

    wrench.copyDirSyncRecursive(program.templates, program.output);
    // TODO: might want to skip dot files and base.html
}

function proc(t, o, f, ctx) {
    var stream = mu.compileAndRender(t, ctx);
    var target = path.join(o, path.basename(f, '.md') + '.html');
    var writeStream = fs.createWriteStream(target);

    stream.pipe(writeStream);
    stream.on('end', function() {
        console.log('Wrote ' + target);
    });
}

function quit(msg) {
    console.log(msg);
    process.exit();
}   

// http://stackoverflow.com/questions/4394747/javascript-curry-function
function partial(fn) {
    var slice = Array.prototype.slice;
    var args = slice.apply(arguments, [1]);

    return function() {
        return fn.apply(null, args.concat(slice.apply(arguments)));
    };
}

